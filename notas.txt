Introducción al curso de bases de datos

	Historia de las Bases de Datos:

		- 1950-1960: Maquinas tabuladoras, tarjetas perforadas y cintas magnéticas.

		- 1960-1979: Modelos jerárquicos, discos duros, modelo de data relacional, transacciones en tiempo real.

		** Un disco duro tiene información persistente, o sea que perdura en el tiempo.

		- 1970-1980: SQL, Sistemas SQL comerciales, bases de datos paralelas y distribuidas, bases de datos
		  orientadas a objetos.

			** SQL es un estándar, la mayoría de los comandos básicos, en cualquier tipo de datos que sea SQL deben funcionar (MariaDB, MySQL, etc).

		- 1980-1990: Data mining, data warehouse, e-commerce.

		- 2000-Actualidad: XML, administración automatizada, analytics, big data, No SQL, InMemory, Scale Out,
		  Systems of Engagement.


	** Los datos no son información. Solo en el momento que creamos un reporte que contenga ciertos datos,
	   éstos se convierten en información.

	DBMS: Data Base Management System == SGBD: Sistemas de Gestión de Bases de Datos.


Tipos de bases de datos y sus aplicaciones en la industria.

	Las bases de datos se pueden dividir en:

		- Relacionales
		- No relacionales

	Bases de datos relacionales (empresariales):

		- DB2
		- SQL Server
		- Oracle

	Bases de datos relacionales (comunes):

		- MariaDB: Derivada de MySql 
		- PostgreSQL: Es una base de datos comunitaria pero tiene una versión enterprise que tiene soporte.

	Bases de datos no relacionales:

		 - Redis: Es una base de datos muy usada actualmente.
		 - neo4j: Es una base de datos basada en nodos. Esta centrada en grafos que nos va a permitir encontrar relaciones entre 
		 	objetos. Muy comun en ecommerce.
		 - Cassandra: Base de datos del proyecto Apache. Trabaja con grandes volumenes de datos.
		 - MongoDB: Base de datos noSQL que se basa en trabajar en varias instancias.

		– Bases de datos “Clave” – “Valor”: Es el modelo de NoSQL más popular y sencilla en cuanto a funcionalidad.
		– Bases de datos “Documentales”: Este tipo es el más versátil ya que guarda información como un documento generalmente de
		  tipo JSON o XML.
		– Bases de datos “En grafo”: La información representada en este tipo de bases de datos se realiza en forma de
		  nodos de un grafo y sus relaciones con las aristas del mismo.
		– Bases de datos “Orientadas a Objetos”: En este tipo de bases de datos la información se representa mediante objetos
		  de igual forma que lo hacen los lenguajes de programación orientados a objetos.

	Aplicaciones de Bases de Datos:

		- Hacer reservaciones, las cuales no redundan (repetir) en data (Aerolineas).
		- Tomar desiciones basados en un comportamiento histórico - registro de las notas - (Escuelas).
		- Realizar transacciones internas y externas (Bancos).
		- Registros distribuidos, usando bases de datos como fundamento (blockchain).
		- Registro de inventarios, compra, venta y relación con sus usuarios y clientes (Tiendas de Retail)
		- Inventario y Registro de producción (Manufactura)
		- Historial de empleados (Recursos Humanos)

	** Una base de datos no necesariamente puede ser un sistema unificado, también puede ser un sistema que se encuentre dentro
	de una sola infraestructura (o arquitectura) con instancias separadas.


Visión general de los datos
	
	Es algo que me permite describir un objeto. Este objeto global lo vamos a llamar 'Entidad'. 

	** Entidad: Es una abstracción del mundo real.
	** Relacion: Como se comportan las entidades con respecto a otras entidades.

		Ejemplo: Un vaso, el material del vaso es vidrio, el dato seria el material.

	Un dato por si solo no representa nada, para que represente algo debe ser explotado de forma correcta. Los datos se transforman en
	información cuando se les da sentido, cuando se les da un contexto.


	Diseño de bases de datos:

		- Niveles de abstracción:

			- Conceptual: Proceso de modelado de la base de datos basado objetos que se van a utilizar y sus caracteristicas. Se deben
			  tener en cuenta los conceptos de entidad / relación.

			- Lógico: Permite resolver dudas de consistencia que se generan en el nivel conceptual.

			- Físico: Aquí procedemos a implementar nuestra base de datos de la forma más eficiente posible al sistema de gestión de
			  bases de datos de nuestra elección. Es aquí donde llevamos nuestra estructura general a la forma requerida por el sistema
			  de gestión de bases de datos que elegimos para nuestro proyecto.

			  Un dato pueder ser de diferente tipo dependiendo de SGBD:

			  	Por ejemplo: en mi modelo tengo en dato CHAR pero el SGBD no usa tipos CHAR si no VARCHAR.


Tipos de datos

	- Caracteres: Pueden ser desde letras hasta caracteres especiales.
	- Numérico: Del 0 al 9 pero con una longitud especial.
	- Varchar: Caracteres con un formato más variable.
	- Imagen
	- Fecha: Generalmente van acompañadas de una hora.
	- Moneda: esto facilita todo si se trabaja con diferentes denominaciones.
	- Texto: Variables que tienen mayor tamaño que un char o que un varchar.
	- Bit: Se puede trabajar con 1 y 0 o también con verdadero y falso.
	- Decimal

	** La mayoría de estos tipos de datos se basan en el stándar SQL92, los cuales son aplicables a todas las bases de datos

	- Esquema = Es la estructura lógica que va a tener una Base de Datos
	- Instancia = Contenido de partículas que tiene una Base de Datos en un instante de tiempo.

	** Para poder modelar se debe describir:

		1. Datos.
		2. Relación entre los datos
		3. Restricciones de los datos

	Para hacer la descripción de la base de datos:

		1. DML: Data Manipulation Language o Lenguaje de Manipulación de Datos: Es un lenguaje procedimental y declarativo, contiene un
			conjunto de instrucciones que va ayudar en el proceso de construcción de la BD.

		2. DDL: Data Definition Language o Lenguaje de Definición de Datos: Especifico el esquema de la BD, generar diccionarios de 
			datos, las restricciones de integridad y las autorizacion para que ciertos usuarios no vean cierta data.

		3. SQL: Structured Query Language o Lenguaje de Consulta Estructurada

	Otros tipos de bases de datos:

		- Bases de datos relacionales.
		- Basadas en objetos relacionales.
		- XML
		- NoSQL
		- In-Memory


Diferentes tipos de bases de datos

	SQL:
		* Lenguaje estructurado
		* Esquemas de tablas
		* Integración con otros tipos de archivos
		* Indexación por medio de árboles: La indexación funciona como un indice de un libro o de un temario, nos dice donde encontramos
			un tema y en que pagina. La indexación en SQL se hace por medio de una estructura de arbol, esta nos permite hacer
			busquedas. Existe el problema que cuando se buscan tipos de datos que no estan necesariamente estructurados en una
			estructura de datos se busca desde el primer dato hasta el ultimo.
		* Scale Up: Crecimiento Vertical

		Ejemplos: PostgreSQL, MariaDB


	NoSQL:
		* Lenguaje estructurado
		* Lenguaje no estructurado
		* Diferente tipo de indexación, normalmente JSON:  no necesariamente funciona como un arbol, se pueden hacer indices
			dividiendo los objetos por sus caracteristica y particularidades.
		* Crecimiento horizontal

		Ejemplos: MongoDB, Cassandra


	Analiticas y de bigdata:
		* Lenguaje no estructurado.
		* Integración de muchos sistemas: Lo puedo integrar como a mi BD como a un filesystem
		* Sistemas tradicionales y de engagement: Como twitter, facebook, podemos necesitar datos de ellos pero es necesario bajar 
			toda la data de estos servicio.
		* Principo divide y venceras: dividir el problema en problemas más pequeños.
		* Basado en esquemas Scale out: crecimiento horizontal

		Ejemplos: Hadoop, Hortonworks, Spark


	Basadas en aceleración:
		Se crearon para solucionar el inconveniente que se presenta al querer realizar una busqueda en el esquema de arbol sobre una 
		inmensa cantidad de datos, donde la busqueda tomaria mucho tiempo.

		* Normalmente basadas In-Memory: son muy rapidas PERO no tienen persistencia.
		* Uso de aceleradores como GPU, Flash cards, FPGAs
		* Estructuras diferentes por ejemplo basadas en nodos.
		* Uso frecuente en ambientes empresariales productivos y de datawarehauose

		Ejemplos: Redis, neo4j, Kinetica.


	Formas de uso:
		* On premise, open source: Que corre en mi maquina local y no necesita una gran infraestructura para desplegarla.
		* Licenciamiento por cores y sockets: se paga dependiendo de ciertas características; como el hardware en el que va a correr.
		* Licenciamiento modular: se paga por funcionalidades o modulos para necesidades diferentes.
		* Pago por uso a través de SAAS (Software As A Service) ó PAAS (Platform As A Service): Es como adquirir una renta y pagar por
		  	usar una base de datos.
		* Suscripción de nodos de computo: funciona para plataformas como Hadoop el cual no es centralizado y trabaja de forma 
			distribuida, se paga por nodo utilizado.

*********
Datawarehose: es un repositorio unificado para todos los datos que recogen los diversos sistemas de una empresa.
	El repositorio puede ser físico o lógico y hace hincapié en la captura de datos de diversas fuentes sobre todo para fines
	analíticos y de acceso.

*********


Hadoop

	Espacio para averiguar sobre Hadoop



Que es una entidad?

	Entidad = Una abstracción del mundo real. Como en POO un objeto

	Notación Barker's: Notación para representar bases de datos (Entidades y Relaciones). 
		http://www.vertabelo.com/blog/technical-articles/barkers-erd-notation

	Recomendación: El formato para trabajar con los IDs debe ser "number". No siempre va a poder ser así, pero
	es lo más recomendable:

	Ejemplo: Vamos representar la entidad CASA

		 ___________________________
		|							|
		|		CASA 				|
		|							|
		|	# Número de ventanas    |---- number
		|	# Número de puertas     |---- number
		|	Color                   |---- character(30)
		|	ID                      |---- number
		|	Ubicación               |---- text
		|___________________________|



Que es una relación?

	Para definir una relación tenemos que tener en cuenta los siguientes puntos:

		* La obligatoriedad: Ésta se denota con una línea continua.
		* Opcional: Se representa con una linea punteada.

	La representación de la relación uno a muchos es con una pata de gallo


	0 - 1 ----------- (cero a uno: es obligatorio pero solo se puede tener uno)
	1 - 1 _______ (uno a uno: es obligatorio y solo se puede tener uno)
	0 - M ----------- ≡ (cero a muchos: no es obligatorio y se puede tener muchos)
	1 - M _______ ≡ (uno a muchos: es obligatorio y se puede tener muchos)
	M - M ≡ ----------- ≡ (muchos a muchos: no es obligatorio y se puede tener muchos)



Características o datos de una entidad

	** Los indices deben ser valores únicos y numéricos. Se recomienda que sean de tipo "numérico" porque estos
		tipos de datos son mas rápidos de encontrar por medio de una búsqueda, ya que solo hay 10 posibilidades
		(0 a 9) de comparación a diferencia de un tipo de dato caracter donde hay que hacer al rededor de 70 
		comparaciones.

	- Entidad Fuerte: La constituyen las tablas principales de la BD, que contienen los registros principales
		del sistema de información y que requieren de entidades o tablasauxiliares para completar su descripción
		o información.

	- Entidad Debil: Tablas auxiliares de una tabla principal a la que completan o complementan con la
		información de sus registros relacionados.

	¿Qué es un atributo?

		Los atributos de una entidad son las características que lo identifican o lo definen.


¿Ya aparecieron las llaves?

	Las llaves nos dan acceso a los datos de una entidad, su notación es la de numeral #.

	** Las llaves tienen que ser irrepetibles y obligatorias, por lo tanto el ID puede ser una llave.

	** Una llave puede ser compuesta, esta se compone de 2 numeros, entre ID y Numero de seguro social. (Como
		un numero de teléfono móvil).

	Llaves foraneas:
	** Las llaves foráneas son llaves que van a estar en nuestra tabla, que no necesariamente son nuestras llaves
		primarias pero van a permitir acceder a otra tabla donde ahí sean llaves primarias.
		Una llave foranea tiene que ser llave primaria de una tabla (entidad).

	Las llaves son fundamentales por que son obligatoriamente índices, los cuales permiten encontrar los datos
	cuando se necesitan de una forma rápida y ordenada.

	Tuplas: las tuplas están formadas por datos de varias columnas en la misma fila.
	Campo: El campo representa el tipo de dato.
	Fila: fila es la unión de todos esos diferentes tipos de datos correspondientes a un registro.



Indices e indexación

	Las llaves primarias siempre van ha ser indices
	Las bases de datos indexan bajo el algoritma 'Arboles B+': https://estructurasite.wordpress.com/arbol-b/

		   _______|_______		
		__|__   __|__   __|__
       |  |  | |  |  | |  |  |

       Es un arbol con un tranco y principal y del cual se desprenden 3 raices y de cada raíz otras 3.....

    Por defecto todas la bases de datos están indexadas asi NO tenga indices el primer atributo de una base de datos que se encuentra
    oculto se llama 'RowID'.

    Es importante que los indices sean numericos ya que la base de datos va a buscar la información siempre desde la primera rama (la
    que este más a la izquierda) y recorrera rama por rama hasta que encuentre lo que busca. Esto puede tarder mucho si el arbol es muy
    grande.


Constrains o Restricciones

	- Las restricciones se pueden trabajar desde la Base de Datos. Normalmente las validaciones con restricciones se hacen desde la
	  aplicación, pero se puede hacer desde la Base de Datos.

	- Las llaves primarias y las llaves foraneas no solamente tienen la restricción 'Not null', sino que además tienen la restricción
	  'unique', no puede haber otra igual.

	- Con 'check', las validaciones que podemos hacer son: Igual, mayor o igual, menor o igual, mayor qué o menor qué.



Capas de abstracción del modelo Entidad-Relación

	** Capa conceptual: En esta capa vamos a tener varias entidades, aún sin nombre definido. Las entidades van a tener cada una sus
	   llaves primarias y sus atributos, además van a tener relaciones. Para que existan las relaciones “muchos a muchos” se necesitan
	   llaves foráneas en las entidades.
         ________             ________            _______
	  	|		 |           |        |          |       |
		| Ent1   |≡---------≡| Ent2   |---------≡| Ent3  |
		|________|           |________|          |_______|


	** Capa logica: Para poder procesar las relaciones “muchos a muchos” las va a partir en entidades que se llaman: Entidades Débiles.
		Estas entidades debiles son intermedias como la "Ent1-2", y va a cambiar las relaciones: La Ent1 se va a relacionar 1 a M con Ent1-2 y Ent2 igual 1 a M con Ent1-2, para poder relacionarce la Ent1-2 debe tener una llaves (#) ver cuadro:



         ________                ________            ________
	  	|		 |              |        |          |        |
		| Ent1   |              | Ent2   |---------≡| Ent3   |
		| # Ent1 |              | # Ent2 |          | # Ent3 |
		|________|              |________|          |________|
            |                     |
			|		_________     |
			|	   |         |    |
			------≡| Ent1-2  |≡----
				   | # Ent1  |
                   | # Ent2  |
                   |         |
				   |_________|

        Para la relación Ent2 y Ent3 se necesita una llave foranea ya que es una relacion 1 a M entre dos entidades fuertes. Esta llave
        foranea se coloca en la entidad que recibe la pata de gallo:


       
         ________                ________            _________
	  	|		 |              |        |          |         |
		| Ent1   |              | Ent2   |---------≡| Ent3    |
		| # Ent1 |              | # Ent2 |          | # Ent3  |
		|________|              |________|          | *fk Ent2|
            |		              |                 |_________|
            |                     |
			|		_________     |
			|	   |         |    |
			------≡| Ent1-2  |≡----
				   | # Ent1  |
                   | # Ent2  |
                   |         |
				   |_________| 


		** Según el ejemplo: Tengo una entidad Usuarios (Ent1) y otra Rutas (Ent2) entonces un usuarios puede usar muchas rutas y
		una ruta puede ser usada por muchos usuarios. Para crear la relacion creamos la entidad debil (Ent1-2) en donde almacenamos 
		la relacion de esas rutas como los viajes que realiza el usuario, ademas puede tener otros atributos como el numero de silla
		que usó el usuario.

    ** Capa fisica: Este modelo va a ser el paso del modelo lógico hacia la representación que ya va a tener la Base de Datos.
    En esta capa, ya cada uno de los datos empieza a entrar en las clasificaciones según su tipo de dato. En este nivel las lineas de 
    las relaciones pasan ha ser flechas.



Metodología básica de 9 pasos con Barker (Paso 1) Identificar Cuáles son las Entidades Resuelven Nuestro Problema:
	
	** Documentarse muy bien acerca del problema que se va a resolver.

		- La entidad (o modelo) es nombrado en SINGULAR, la tabla se denomina en PLURAL.

		*** Una buena técnica para determinar de forma natural una entidad, es identificar aquellos elementos que poseen atributos que
		    los definen y que además aporta algo para definir el modelo del negocio. Definitivamente un elemento al que yo tenga que
		    forzarle sus atributos, no es una entidad. ***

    Ejemplos: Identificar la entidades de Aeropuertos:

    							- Avión
    							- Aerolinea
    							- Ruta
    							- Tripulante
    							- Piloto
    							- Aeropuerto
    							- País
    							- Ciudad
    							- Pasajero


Metodología básica de 9 pasos con Barker (Paso 2): Identificación de las Relaciones de las Entidades.

	** Pueden existir relaciones entre entidades que se relacione entre ellas mismas.


				| Avión	|Aerolinea 	|Ruta   |Tripulante	|Piloto	|Aeropuerto	|País 	|Ciudad	  |Pasajero
	Avión		|   *   |    1:1    |  1:M  |   1:M     |  1:M  |   1:M     |  *    |   *     |   1:M
	____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    Aerolinea   |   1:M |    *      |  1:M  |	  1:M   |  1:M  |   1:M     |  *    |   *     |   1:M  
    ____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    Ruta        |   1:M |   1:M     |   *   |     *     |   *   |    1:M    |  1:1  |   *     |    *
    ____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    Tripulante  |   1:1 |   1:1     |   *   |     *     |   *   |    *      |   *   |   *     |    *
    ____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    Piloto      |   1:1 |   1:1     |   1:M |     *     |   *   |    *      |   *   |   *     |    * 
    ____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    Aeropuerto  |   1:M |   1:M     |   1:M |     *     |   *   |    *      |   1:1 |   1:1   |    1:M
    ____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    País        |   *   |    *      |   1:M |    1:M    |   1:M |    1:M    |   *   |    *    |    1:M
    ____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    Ciudad      |   1:M |   1:M     |   1:M |    1:M    |  1:M  |   1:M     |   *   |    *    |    1:M
    ____________|_______|___________|_______|___________|_______|___________|_______|_________|___________
    Pasajero    |   1:1 |   1:M     |   1:M |    1:M    |  1:M  |    1:M    |   *   |    *    |     *



    ** Entidades Recursivas: Empleado: un empleado tiene un jefe , y a su vez el jefe tambien es un empleado de una empresa.



Metodología básica de 9 pasos con Barker (Paso 3): Entidades y Relaciones

	** Diagramar las entidades y las relaciones




Metodología de Diseño (Correcciónes del paso 2 y 3)

	En este ejemplo cuando la tabla de relaciones se divide por una diagonal quiere decir que son equivalentes, osea que en cada una
	de la relaciones de un lado y otro debe haber consistencia: No puede ser que en un lado haya una relación y en la otra no, no 
	importa si son diferentes relaciones lo que importa es que exitan en las dos o no de igual forma.

	Para tener muy encuenta:
	** Transitividad: Signfica que yo puedo llegar a una tabla desde una con la que este relacionada. No tiene que ser directamente,
		para evitar redundancia.

			Tengo: A --> B --> C
				  Yo puedo llegar de A a C porque estoy relacionado con B y B a su vez con C.



Metodología de Diseño (Paso 4): Asignar Atributos a las Entidades.

	Hasta este punto no nos vamos a fijar en que motor de base de datos vamos a correr.

	Para hacer un buen ejercicio hay que pensar en:

		- ¿Que atributos voy a necesitar?
		- ¿Cual va a ser la codificación que voy a utilizar?
		- ¿Como los voy a trabajar dependiendo del tipo de dato?
	    - El tipo de dato va a ser obligatorio o no obligatorio. Null o Not Nul
		- Vamos a tener un identificador único de cada tabla, una llave primaria. Mínimo una por tabla.
 		- Para hacer mas fácil las consultas hay que tener una nomenclatura para cada tabla (como AV_ para avión) y así poder
 	      referirnos a los atributos que se repiten en varias tablas (como nombre).
		- Hay que revisar el tipo de dato que vamos a usar, los identificadores se pueden trabajar como serial,
		 así la misma base de datos se va a encargar de que el valor de ese identificador sea único e irrepetible.
		- Definimos la obligatoriedad de los datos, las llaves primarias tienen que ser obligatorias.


Metodología de Diseño (Solución del paso 4): Terminando de Aseignar Atributos a las Entidades

	Revisar nuevamente los atributos creados para no tener errores



Metodología de Diseño (Pasos 5, 6 y 7) 5. Generar un diagrama conceptual, 6. Modelo lógico, 7. Identificar nuevos atributos
que generan nuestras entidades débiles.

	Paso 5: Generar un diagrama conceptual (entidades, relaciones y atributos). Las relaciones siempre se van a hacer en
			2 sentidos (A con B y B con A).

	Paso 6: Modelo lógico:
		Las relaciones se hacen por medio de entidades débiles, entre las entidades relacionadas, esto es porque no
		podemos generar muchas llaves foráneas en ambas entidades (fuertes).

		En estas entidades debiles se usan ambas llaves primarias de las entidades (fuertes) que tenían relación.

		En las entidades debiles no debería haber tipos de datos seriales, estas tendrían que ser integer,
		ya que las entidades debiles no tienen forma de tener consistencia con esa serialidad.

	Paso 7: Identificar nuevos atributos que generan nuestras entidades débiles.

		Por ejemplo un video en youtube puede ser visto por muchos usuarios y un usuario puede ver muchos videos, entonces creo la
		tabla intermedia con la relación uno a muchos con usuario y una a muchos con el video de youtube, luego en esta tabla
		intermedia pones un atributo timestamp para guardar cuando vio el video, otra puede ser cuantas veces vio el video, en
		que momento dejo de ver el video o pauso, datos que son exclusivos de la relación.


Metodología de Diseño (Paso 8): Construir el Diagrama del Modelo Físico

	Para identificar un modelo cuando lo vea y saber en que paso de la metodologia se encuentra:
		- Modelo Fisico : Lineas Rectas en las cajas de la entidad
		- Modelo Logico : Lineas Curvas en las cajas de la entidad

	- Las lineas de las relaciones van a ser lineas rectas, la relación uno a muchos vamos a crear una linea con un sentido que
	termina en cabeza de flecha. Las lineas 1 a 1 o 0 a 1 se mantienen como antes.

	- Las llaves foráneas en entidades debiles refieren o apuntan hacia su llave primaria en entidades fuertes.

	- En el modelo fisico hay que poner el tipo de dato de acuerdo a la base de datos en la que vamos a trabajar.



Metodología de Diseño (Paso 9): Pasar al estándar de la base de datos (SQL)

	Script clase 23



Reto con el paso 4 de la Metodología de Diseño



	
